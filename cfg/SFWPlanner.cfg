#!/usr/bin/env python

PACKAGE = 'social_force_window_planner'

from math import pi

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


gen.add("max_trans_acc", double_t, 0, "The translational acceleration limit of the robot", 1.0, 0, 20.0)
gen.add("max_rot_acc", double_t, 0, "The rotational acceleration limit of the robot", 1.0, 0, 20.0)


gen.add("max_trans_vel", double_t, 0, "The maximum translation velocity for the robot in m/s", 0.6, 0, 10.0)
gen.add("min_trans_vel", double_t, 0, "The minimum translation velocity for the robot in m/s", 0.1, 0, 10.0)
gen.add("max_rot_vel", double_t, 0, "The absolute value of the maximum rotational velocity for the robot in rad/s",  0.8, 0, 20.0)
gen.add("min_rot_vel", double_t, 0, "The absolute value of the minimum rotational velocity for the robot in rad/s",  0.3, 0, 20.0)
gen.add("min_in_place_rot_vel", double_t, 0, "The absolute value of the minimum in-place rotational velocity the controller will explore", 0.5, 0, 20.0)


gen.add("yaw_goal_tolerance", double_t, 0, "Tolerance in angle (rad/s) to reach the goal", 0.12, 0, 3.0)
gen.add("xy_goal_tolerance", double_t, 0, "Tolerance in distance (m) to reach the goal", 0.20, 0, 2.0)
gen.add("wp_tolerance", double_t, 0, "Distance from the robot to the point of the global path to take", 0.5, 0, 2.0)


gen.add("sim_time", double_t, 0, "The amount of time to expand the robot movement in seconds", 0.5, 0, 10)
gen.add("sim_granularity", double_t, 0, "The granularity with which to check for collisions along each trajectory in meters", 0.025, 0, 5)


gen.add("social_weight", double_t, 0, "The weight given to the cost of the social work done", 1.2, 0, 10.0);
gen.add("costmap_weight", double_t, 0, "The weight given to the costmap cost", 2.0, 0, 10.0);
gen.add("angle_weight", double_t, 0, "The weight given to the cost of angle difference between robot heading and local goal", 0.7, 0, 10.0);
gen.add("distance_weight", double_t, 0, "The weight given to the cost of the distance to the local goal", 1.0, 0, 10.0);
gen.add("velocity_weight", double_t, 0, "The weight given to the cost of the desired velocity difference", 1.0, 0, 10.0);


exit(gen.generate(PACKAGE, "sfw_planner", "SFWPlanner"))
